.TH GAMMU-SMSD-TABLES 7 "January 31, 2009" "Gammu 1.23.0" "Gammu Documentation"
.SH NAME

.P
gammu\-smsd\-tables - description of tables for database backends of gammu\-smsd(1)

.SH DESCRIPTION
gammu\-smsd(1) supports several backends. Actual backend is chosen in
a config file gammu\-smsdrc(5).

Separate backends are described in their appropriate man pages. This manual
page describes general database structure and required tables.

More SMS daemons can share single database. If you do not specify PhoneID in
their configuration, all are treated equally and you have no guarantee which
one sends outgoing message. If you configure PhoneID and use it when inserting
message to the outbox table (gammu\-smsd\-inject(1) does this), each SMS
daemon will have separate outbox queue.

.SS Receiving of messages

Received messages are stored in inbox table.

.SS Transmitting of messages

Transmitted messages are read from table outbox and possible subsequent parts
of the same message from outbox_multipart.

.SS Description of tables

.TP
.BI daemons

Information about running daemons.

.TP
.BI gammu

Table holding single value - version of a database schema. See HISTORY for
details what has changed.

.TP
.BI inbox

Table where received messages will be stored.

Fields description:

\fBUpdatedInDB\fR (timestamp)
.br
when somebody (daemon, user, etc.) updated it

\fBReceivingDateTime\fR (timestamp)
.br
when SMS was received

\fBText\fR (text)
.br
encoded SMS text (for all SMS)

\fBSenderNumber\fR (varchar(20))
.br
decoded SMS sender number

\fBCoding\fR (enum('Default_No_Compression', 'Unicode_No_Compression', '8bit', 'Default_Compression', 'Unicode_Compression'))
.br
SMS text coding

\fBUDH\fR (text)
.br
encoded User Data Header text

\fBSMSCNumber\fR (varchar(20))
.br
decoded SMSC number

\fBClass\fR (integer)
.br
SMS class or \-1 (0 is normal SMS, 1 is flash one)

\fBTextDecoded\fR (varchar(160))
.br
decoded SMS text (for Default Alphabet/Unicode SMS)

\fBID\fR (integer unsigned)
.br
SMS identificator (for using with external applications)

\fBRecipientID\fR (text)
.br
which Gammu daemon has added it

\fBProcessed\fR (enum('false', 'true'))
.br
you can use for marking, whether SMS was processed or not


.TP
.BI outbox

Messages enqueued for sending should be placed in this table. If message
is multipart, subsequent parts are stored in table outbox_multipart.

Fields description:

\fBUpdatedInDB\fR (timestamp)
.br
when somebody (daemon, user, etc.) updated it

\fBInsertIntoDB\fR (timestamp)
.br
when message was inserted into database

\fBSendingDateTime\fR (timestamp)
.br
set it to some value, when want to force sending after some planned time

\fBText\fR (text)
.br
SMS text encoded using hex values in proper coding. If you want to use
TextDecoded field, keep this NULL (or empty).

\fBDestinationNumber\fR (varchar(20))
.br
recipient number

\fBCoding\fR (enum('Default_No_Compression', 'Unicode_No_Compression', '8bit', 'Default_Compression', 'Unicode_Compression'))
.br
SMS text coding

\fBUDH\fR (text)
.br
User Data Header encoded using hex values which will be used for constructing
the message. Without this, message will be sent as plain text.

\fBClass\fR (integer)
.br
SMS class or \-1 (0 is normal SMS, 1 is flash one)

\fBTextDecoded\fR (varchar(160))
.br
SMS text in "human readable" form

\fBID\fR (integer unsigned)
.br
SMS/SMS sequence ID

Please note that this number has to be unique also for sentitems table, so
reusing message IDs might not be a good idea.

\fBMultiPart\fR (enum('false','true'))
.br
info, whether there are more SMS from this sequence in outbox_multipart

\fBRelativeValidity\fR (integer)
.br
SMS relative validity like encoded using GSM specs

\fBSenderID\fR (text)
.br
which SMSD instance should send this one sequence

\fBSendingTimeOut\fR (timestamp)
.br
used by SMSD instance for own targets

\fBDeliveryReport\fR (enum('default','yes','no'))
.br
when default is used, Delivery Report is used or not according to SMSD instance settings; yes forces Delivery Report.

\fBCreatorID\fR (text)
.br
sender identification, it has to match PhoneID in SMSD configuration to make
SMSD process this message




.TP
.BI outbox_multipart

Data for outgoing multipart messages.

Fields description:

\fBID\fR (integer unsigned)
.br
\fBText\fR (text)
.br
\fBCoding\fR (enum('Default_No_Compression', 'Unicode_No_Compression', '8bit', 'Default_Compression', 'Unicode_Compression'))
.br
\fBUDH\fR (text)
.br
\fBClass\fR (integer)
.br
\fBTextDecoded\fR (varchar(160))
.br
\fBID\fR (integer unsigned)
.br
the same meaning as values in outbox table

\fBSequencePosition\fR (integer)
.br
info, what is SMS number in SMS sequence (start at 2, first part is in outbox
table).


.TP
.BI phones

Information about connected phones. This table is periodically refreshed and
you can get information such as battery or signal level from here.

Fields description:

\fBID\fR (text)
.br
PhoneID value

\fBUpdatedInDB\fR (timestamp)
.br
when this record has been updated

\fBInsertIntoDB\fR (timestamp)
.br
when this record has been created (when phone has been connected)

\fBTimeOut\fR (timestamp)
.br
when this record expires

\fBSend\fR (boolean)
.br
currently always true

\fBReceive\fR (boolean)
.br
currently always true

\fBIMEI\fR (text)
.br
IMEI of phone

\fBClient\fR (text)
.br
client name, usually string Gammu with version

\fBBattery\fR (integer)
.br
battery level in percent (or \-1 if unknown)

\fBSignal\fR (integer)
.br
signal level in percent (or \-1 if unknown)

\fBSent\fR (integer)
.br
Number of sent SMS messages (SMSD does not reset this counter, so it might
overflow).

\fBReceived\fR (integer)
.br
Number of received SMS messages (SMSD does not reset this counter, so it might
overflow).

.TP
.BI sentitems

Log of sent messages (and unsent ones with error code). Also if delivery
reports are enabled, message state is updated after receiving delivery report.

Fields description:

\fBUpdatedInDB\fR (timestamp)
.br
when somebody (daemon, user, etc.) updated it

\fBInsertIntoDB\fR (timestamp)
.br
when message was inserted into database

\fBSendingDateTime\fR (timestamp)
.br
when message has been sent

\fBDeliveryDateTime\fR (timestamp)
.br
Time of receiving delivery report (if it has been enabled).

\fBStatus\fR (enum('SendingOK', 'SendingOKNoReport', 'SendingError', 'DeliveryOK', 'DeliveryFailed', 'DeliveryPending', 'DeliveryUnknown', 'Error'))
.br
Status of message sending. SendingError mens that phone failed to send the
message, Error indicates some other error while processing message.

 \fBSendingOK\fR - Message has been sent, waiting for delivery report.
 \fBSendingOKNoReport\fR - Message has been sent without asking for delivery report.
 \fBSendingError\fR - Sending has failed.
 \fBDeliveryOK\fR - Delivery report arrived and reported success.
 \fBDeliveryFailed\fR - Delivery report arrived and reports failure.
 \fBDeliveryPending\fR - Delivery report announced pending deliver.
 \fBDeliveryUnknown\fR - Delivery report reported unknown status.
 \fBError\fR - Some other error happened during sending (usually bug in SMSD).

\fBStatusError\fR (integer)
.br
Status of delivery from delivery report message, codes are defined in GSM
specification.

\fBText\fR (text)
.br
SMS text encoded using hex values

\fBDestinationNumber\fR (varchar(20))
.br
decoded destination number for SMS

\fBCoding\fR (enum('Default_No_Compression', 'Unicode_No_Compression', '8bit', 'Default_Compression', 'Unicode_Compression'))
.br
SMS text coding

\fBUDH\fR (text)
.br
User Data Header encoded using hex values

\fBSMSCNumber\fR (varchar(20))
.br
decoded number of SMSC, which sent SMS

\fBClass\fR (integer)
.br
SMS class or \-1 (0 is normal SMS, 1 is flash one)

\fBTextDecoded\fR (varchar(160))
.br
SMS text in "human readable" form

\fBID\fR (integer unsigned)
.br
SMS ID

\fBSenderID\fR (text)
.SS Injecting a message using SQL

.br
which SMSD instance sent this one sequence

\fBSequencePosition\fR (integer)
.br
SMS number in SMS sequence

\fBTPMR\fR (integer)
.br
Message Reference like in GSM specs

\fBRelativeValidity\fR (integer)
.br
SMS relative validity like encoded using GSM specs

\fBCreatorID\fR (text)
.br
copied from CreatorID from outbox table, matches PhoneID


.TP
.BI pbk

Not used by SMSD currently, included only for application usage.

.TP
.BI pbk_groups

Not used by SMSD currently, included only for application usage.

.SH HISTORY

History of schema versions:

10 - DeliveryDateTime is now NULL when message is not delivered, added several
indexes

9 - added sent/received counters to phones table

8 - introduced phones table

7 - added CreatorID to tables (it holds PhoneID if set)

.SH EXAMPLE

.SS Creating tables

SQL scripts to create all needed tables for most databases are included in
Gammu documentation (docs/sql). As well as some PHP scripts interacting with
the database.

For example to create SQLite tables, issue following command:
    
    sqlite3 smsd.db < docs/sql/sqlite.sql

.SS Injecting a message using SQL

To send a message, you can either use gammu-smsd-inject(1), which does all the
magic for you, or you can insert the message manually. The simplest example is
short text message:

    INSERT INTO outbox (
        DestinationNumber,
        TextDecoded,
        CreatorID,
        Coding
    ) VALUES (
        '800123465', 
        'This is a SQL test message', 
        'Program',
        'Default_No_Compression'
    );

.SS Injecting long message using SQL

Inserting multipart messages is a bit more tricky, you need to construct also
UDH header. For example long text message would look like (please note that
each UDH needs to contain number of parts and sequence position as last two
bytes, the D3 value in example is message reference number, it can be
anything):

    INSERT INTO outbox (
        CreatorID,
        MultiPart,
        DestinationNumber,
        UDH,
        TextDecoded,
        Coding
    ) VALUES (
        'Gammu 1.23.91',
        'true',
        '123465',
        '050003D30201',
        'Mqukqirip ya konej eqniu rejropocejor hugiygydewl tfej nrupxujob xuemymiyliralj. Te tvyjuh qaxumur ibewfoiws zuucoz tdygu gelum L ejqigqesykl kya jdytbez',
        'Default_No_Compression'
    )

    INSERT INTO outbox_multipart (
        SequencePosition,
        UDH,
        Class,
        TextDecoded,
        ID,
        Coding
    ) VALUES (
        2,
        '050003D30202',
        'u xewz qisubevumxyzk ufuylehyzc. Nse xobq dfolizygqysj t bvowsyhyhyemim ovutpapeaempye giuuwbib.', 
        <ID_OF_INSERTED_RECORD_IN_OUBOX_TABLE>,
        'Default_No_Compression'
    )

.SH SEE ALSO
Database backends:
gammu\-smsd\-mysql(7), gammu\-smsd\-pgsql(7), gammu\-smsd\-dbi(7)

gammu\-smsd(1), gammu\-smsdrc(5), gammu(1), gammurc(5)
.SH AUTHOR
gammu\-smsd and this manual page were written by Michal Cihar <michal@cihar.com>.
.SH COPYRIGHT
Copyright \(co 2009 Michal Cihar and other authors.
License GPLv2: GNU GPL version 2 <http://www.gnu.org/licenses/old\-licenses/gpl\-2.0.html>
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH REPORTING BUGS
Please report bugs to <http://bugs.cihar.com>.
