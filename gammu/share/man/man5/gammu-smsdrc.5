.TH GAMMU-SMSDRC 5 "January  4, 2009" "Gammu 1.23.0" "Gammu Documentation"
.SH NAME

.P
gammu\-smsdrc - gammu\-smsd(1) configuration file 

.SH SYNOPSIS
.I /etc/gammu\-smsdrc
.SH DESCRIPTION
gammu\-smsd(1) reads configuration from a config file. It's location can be
specified on command line, otherwise default path 
/etc/gammu\-smsdrc
is used.

This file use ini file syntax, with comments being marked with both ; and #.
Sections of config file are identified in square brackets line [this]. All key
values are case insensitive.

Configuration file of gammu\-smsd consists of at least two sections - [gammu]
and [smsd].

The [gammu] section is configuration of a phone connection and is same as
described in gammurc(5) with the only exception that logfile is ignored and
common logging for gammu library and SMS daemon is used. However the logformat
directive still configures how much messages gammu emits.

The [smsd] section configures SMS daemon itself, which are described in
following subsections. First general parameters of SMS daemon are listed and
then specific parameters for storage backends.

Then there are optional sections [include_numbers] and [exclude_numbers],
which control message filtering (see bellow).

.SS General parameters of SMS daemon

.TP
.BI Service

SMSD service to use, one of FILES, MYSQL, PGSQL, DBI (depends on compiled in
support for backends).

\fBFILES\fR - stores messages in files, see gammu-smsd-files(7) for details
.br
\fBMYSQL\fR - stores messages in MySQL database, see gammu-smsd-mysql(7) for
details
.br
\fBPGSQL\fR - stores messages in PostgreSQL database, see gammu-smsd-pgsql(7)
for details
.br
\fBDBI\fR - stores messages in any database supported by libdbi, this includes
MSSQL, MySQL, PostgreSQL or SQLite databases, see gammu-smsd-dbi(7) for
details

.TP
.BI PIN

PIN for SIM card. This is optional, but you should set it if your phone after
power on requires PIN.

.TP
.BI NetworkCode

Network personalisation password. This is optional, but some phones require it
after power on.

.TP
.BI PhoneCode

Phone lock password. This is optional, but some phones require it after power
on.

.TP
.BI LogFile

File where SMSD actions are being logged. You can also use special value
"syslog" which will send all messages to syslog daemon. On Windows another
special value "eventlog" exists, which will send logs to Windows Event Log.

Default is to provide no logging.

.TP
.BI DebugLevel

Debug level for SMSD. The integer value should be sum of all flags you
want to enable. 

\fB1\fR - enables basic debugging information
.br
\fB2\fR - enables logging of SQL queries of service backends
.br
\fB4\fR - enables logging of gammu debug information (has to be enabled also in
gammu section)

Generally to get as much debug information as possible, use 255.

Default is 0, what should mean no extra information.

.TP
.BI CommTimeout 

How many seconds should SMSD wait after each read/write loop.

Default is 30.

.TP
.BI SendTimeout 

Shows how many seconds SMSD should wait for network answer during sending sms.
If nothing happen during this time, sms will be resent.

Default is 30.

.TP
.BI MaxRetries

How many times will SMSD try to resend message if sending fails.

Default is 1.

.TP
.BI ReceiveFrequency 

The number of seconds between testing for received SMSes, when the phone is
busy sending SMSes. Normally a test for received SMSes is done every
CommTimeout seconds and after each sent SMS. 

Default is 0 (not used).

.TP
.BI CheckSecurity

Whether to check if phone wants to enter PIN.

Default is 1 (enabled).

.TP
.BI ResetFrequency

The number of seconds between performing a preventive soft reset in order to
minimize the cases of hanging phones e.g. Nokia 5110 will sometimes freeze to
a state when only after unmounting the battery the phone will be functional
again.

Default is 0 (not used).

.TP
.BI DeliveryReport

Whether delivery reports should be used, one of 'no', 'log', 'sms'.

\fBlog\fR - one line log entry, 
.br
\fBsms\fR - store in inbox as a received SMS
.br
\fBno\fR  - no delivery reports

Default is 'no'.

.TP
.BI DeliveryReportDelay

Delay in seconds how long is still delivery report considered valid. This
depends on brokeness of your network (delivery report should have same
timestamp as sent message). Increase this if delivery reports are not paired
with sent messages. 
                      
Default is 600 (10 minutes).

.TP
.BI PhoneID

String with info about phone used for sending/receiving. This can be useful if
you want to run several SMS daemons.

When you set PhoneID, all messages (including injected ones) will be marked by
this string and it allow more SMS daemons to share single database. This
option has actually no effect of FILES backend service.

.TP
.BI RunOnReceive

Executes a program after receiving message. This parameter is executed through
shell, so you might need to escape some special characters and you can include
any number of parameters. Additionally parameters with identifiers of received
messages are appended to the command line. The identifiers depend on used
service backend, typically it is ID of inserted row for database backends or
file name for file based backends.

.SS Database backends options

All DBI, MYSQL and PGSQL backends (see  gammu\-smsd\-mysql(7),
gammu\-smsd\-pgsql(7), gammu\-smsd\-dbi(7)) for their documentation) supports
same options for configuring connection to a database:

.TP
.BI User

User name used for connection to a database.

.TP
.BI Password

Password used for connection to a database.

.TP
.BI PC

Database server address. It can also contain port or socket path after
semicolon, for example localhost:/path/to/socket.

.TP
.BI Database

Name of database to use. Please note that you should create tables in this
database before using gammu\-smsd. SQL files for creating needed tables are
included in documentation.

.TP
.BI SkipSMSCNumber

When you send sms from some SMS centere you can have delivery reports from
other SMSC number. You can set here number of this SMSC used by you and Gammu
will not check it's number during assigning reports to sent SMS.

.TP
.BI Driver

DBI driver to use. Depends on what DBI drivers you have installed, DBI
supports: mysql, freetds (provides access to MS SQL Server and Sybase), pgsql,
sqlite, sqlite3, firebird and ingres, msql and oracle drivers are under
development.

.TP
.BI DriversPath

Path, where DBI drivers are stored, this usually does not have to be set if
you have properly installed drivers.

.TP
.BI DBDir

Database directory for some (currently only sqlite) DBI drivers. Set here path
where sqlite database files are stored.

.SS Files backend options

The FILES backend accepts following configuration options. See
gammu\-smsd\-files(7) for more detailed service backend description. Please note
that all path should contain trailing path separator (/ on Unix systems):

.TP
.BI InboxPath

Where the received SMSes are stored.

Default is current directory.

.TP
.BI OutboxPath

Where SMSes to be sent should be placed.

Default is current directory.

.TP
.BI SentSMSPath

Where the transmitted SMSes are placed, if same as OutBoxPath transmitted
messages are deleted.

Default is to delete transmitted messages.

.TP
.BI ErrorSMSPath

Where SMSes with error in transmission is placed.

Default is same as SentSMSPath.

.TP
.BI InboxFormat

The format in which the SMS will be stored: 'detail', 'unicode', 'standard'.

\fBdetail\fR   - format used for message backup by gammu(1)
.br
\fBunicode\fR  - message text stored in unicode (UTF-16)
.br
\fBstandard\fR - message text stored in system charset

Default is 'unicode'.

.TP
.BI TransmitFormat

The format for transmitting the SMS: 'auto', 'unicode', '7bit'. 

Default is 'auto'.


.SS Message filtering

SMSD allows to process only limited subset of incoming messages. You can
define filters in [include_numbers] and [exclude_numbers] sections. If
[include_numbers] section exists, all values (keys are ignored) from it are
used as allowed phone numbers and no other message is processed. On the other
side, in [exclude_numbers] you can specify numbers which you want to skip.

.SH EXAMPLE

There is more complete example available in Gammu documentation. Please note
that for simplicity following examples do not include [gammu] section, you can
look into gammurc(5) for some examples how it can look like.

SMSD configuration file for FILES backend could look like:

.RS
.sp
.nf
.ne 7
[smsd]
Service = files
PIN = 1234
LogFile = syslog
InboxPath = /var/spool/sms/inbox/
OutboPpath = /var/spool/sms/outbox/
SentSMSPath = /var/spool/sms/sent/
ErrorSMSPath = /var/spool/sms/error/
.fi
.sp
.RE
.PP

If you want to use MYSQL backend, you will need something like this:

.RS
.sp
.nf
.ne 7
[smsd]
Service = mysql
PIN = 1234
LogFile = syslog
User = smsd
Password = smsd
PC = localhost
Database = smsd
.fi
.sp
.RE
.PP

Process only messages from 123456 number:

.RS
.sp
.nf
.ne 7
[include_numbers]
number1 = 123456
.fi
.sp
.RE
.PP

Do not process messages from evil number 666:

.RS
.sp
.nf
.ne 7
[exclude_numbers]
number1 = 666
.fi
.sp
.RE
.PP


.SH SEE ALSO
gammu\-smsd(1), gammu(1), gammurc(5)

gammu\-smsd\-files(7), gammu\-smsd\-mysql(7), gammu\-smsd\-pgsql(7), gammu\-smsd\-dbi(7), gammu\-smsd\-tables(7)
.SH AUTHOR
gammu\-smsd and this manual page were written by Michal Cihar <michal@cihar.com>.
.SH COPYRIGHT
Copyright \(co 2009 Michal Cihar and other authors.
License GPLv2: GNU GPL version 2 <http://www.gnu.org/licenses/old\-licenses/gpl\-2.0.html>
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH REPORTING BUGS
Please report bugs to <http://bugs.cihar.com>.

Before reporting a bug, please enable verbose logging in SMSD configuration:

    [gammu]
    logformat = textall

    [smsd]
    debuglevel = 255
    logfile = smsd.log

and include this verbose log within bug report.
